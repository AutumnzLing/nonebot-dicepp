:py:mod:`DicePP.roll_dice.modifier`
===================================

.. py:module:: DicePP.roll_dice.modifier


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   DicePP.roll_dice.modifier.RollExpModifier
   DicePP.roll_dice.modifier.REModReroll
   DicePP.roll_dice.modifier.REModMax
   DicePP.roll_dice.modifier.REModMin
   DicePP.roll_dice.modifier.REModCountSuccess



Functions
~~~~~~~~~

.. autoapisummary::

   DicePP.roll_dice.modifier.roll_modifier



Attributes
~~~~~~~~~~

.. autoapisummary::

   DicePP.roll_dice.modifier.ROLL_MODIFIERS_DICT


.. py:class:: RollExpModifier(args: str)

   用于表示掷骰表达式修饰符

   .. py:method:: modify(self, roll_res: roll_dice.result.RollResult) -> roll_dice.result.RollResult
      :abstractmethod:

      修改并返回掷骰数据, 返回的变量应该基于初始变量



.. py:data:: ROLL_MODIFIERS_DICT
   :annotation: :Dict[str, Type[RollExpModifier]]

   

.. py:function:: roll_modifier(regexp: Union[str, Iterable[str]])

   类修饰器, 将自定义掷骰表达式修饰符注册到列表中
   Args:
       regexp: 一个或多个正则表达式, 用来唯一地匹配该修饰符, 若有多个符合则较早定义的优先


.. py:class:: REModReroll(args: str)

   Bases: :py:obj:`RollExpModifier`

   表示某一个骰子满足条件则重骰, 爆炸, 或者爆炸一次

   .. py:method:: modify(self, roll_res: roll_dice.result.RollResult) -> roll_dice.result.RollResult

      输入的roll_res必须由形如XDY的表达式产生, 如果是常量表达式或复合表达式将会抛出一个异常



.. py:class:: REModMax(args: str)

   Bases: :py:obj:`RollExpModifier`

   表示取表达式中x个最大值

   .. py:method:: modify(self, roll_res: roll_dice.result.RollResult) -> roll_dice.result.RollResult

      注意val的顺序会按从低到高的顺序重新排序, 但info里的内容不会



.. py:class:: REModMin(args: str)

   Bases: :py:obj:`RollExpModifier`

   表示取表达式中x个最小值

   .. py:method:: modify(self, roll_res: roll_dice.result.RollResult) -> roll_dice.result.RollResult

      注意val的顺序会按从低到高的顺序重新排序, 但info里的内容不会



.. py:class:: REModCountSuccess(args: str)

   Bases: :py:obj:`RollExpModifier`

   表示计算当前结果中符合条件的骰值的数量

   .. py:method:: modify(self, roll_res: roll_dice.result.RollResult) -> roll_dice.result.RollResult

      修改并返回掷骰数据, 返回的变量应该基于初始变量



