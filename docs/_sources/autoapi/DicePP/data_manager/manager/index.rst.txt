:py:mod:`DicePP.data_manager.manager`
=====================================

.. py:module:: DicePP.data_manager.manager

.. autoapi-nested-parse::

   负责管理数据的类
   若要定义新的数据类型, 请参考DataChunk中的模块



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   DicePP.data_manager.manager.DataManager




.. py:class:: DataManager(data_path: str)

   负责管理持久化数据的类
   所有的持久化数据都应该通过DataManager的实例来获取/修改/更新
   初始化时会自动根据DataChunk中的内容来生成数据格式

   .. py:method:: get_data(self, target: str, path: List[str], default_val: Optional[Any] = None, default_gen: Optional[Callable[[], Any]] = None, get_ref: bool = False) -> Any

      从DataManager中取得数据, 若该数据不存在, 则用defaultVal创建该数据并返回
      如果不指定defaultVal, 访问不存在的数据将会抛出一个异常
      如果path为空列表会返回dataChunk的root, 即所有数据, 注意返回的是拷贝, 开销可能比较大
      Args:
          target(str): 目标DataChunk的名字, 通过identifier定义
          path(Tuple[str]): 路径节点
          default_val(Optional[Any]): 数据默认值, 如果给出默认值, 在访问不存在的数据时会自动创建该数据, 否则抛出异常
          default_gen(Optional[Callable[]]): 数据默认值生成器, 如果有数据默认值, 则以默认值优先, 否则调用生成器得到默认值
          get_ref(bool): 返回数据的拷贝还是引用, 默认返回拷贝, 返回引用容易污染数据
      Returns:
          data(Any): 取得的数据


   .. py:method:: set_data(self, target: str, path: List[str], new_val: Any) -> None

      设置DataManager中保存的数据
      Args:
          target(str): 目标DataChunk的名字, 通过identifier定义
          path(Tuple[str]): 路径节点
          new_val(Any): 要设置的数据值


   .. py:method:: delete_data(self, target: str, path: List[str], force_delete: bool = False, ignore_miss: bool = True) -> Any

      从DataManager中删除数据, 若该数据不存在且ignore_miss为False, 则会抛出异常
      如果path为空列表会清除该dataChunk的所有数据, 仅当force_delete为True时生效, 否则抛出异常
      Args:
          target(str): 目标DataChunk的名字, 通过identifier定义
          path(Tuple[str]): 路径节点
          force_delete(bool): 是否允许删除所有数据
          ignore_miss(bool): 想删除的数据不存在时是否抛出异常
      Returns:
          data(Any): 被删除的数据


   .. py:method:: get_keys(self, target: str, path: List[str])

      类似get_data, 但是不会返回数据的拷贝, 而是返回当前path的所有key, 当前path不存在或不是dict则抛出异常


   .. py:method:: __get_data_chunk(self, target: str) -> data_manager.data_chunk.DataChunkBase


   .. py:method:: load_data(self)

      从本地文件中读取数据, 会完全用本地文件覆盖内存中的信息


   .. py:method:: save_data_async(self)
      :async:


   .. py:method:: save_data(self)

      尝试将被修改过的所有Data Chunks写入到硬盘中, 失败抛出一个DataManagerError



.. py:exception:: DataManagerError(info: str)

   Bases: :py:obj:`Exception`

   DataManager产生的异常, 说明操作失败的原因, 应当在上一级捕获

   .. py:method:: __str__(self)

      Return str(self).



