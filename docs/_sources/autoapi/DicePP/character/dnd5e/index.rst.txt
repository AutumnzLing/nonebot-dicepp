:py:mod:`DicePP.character.dnd5e`
================================

.. py:module:: DicePP.character.dnd5e


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   ability/index.rst
   character/index.rst
   health/index.rst
   money/index.rst
   spell/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   DicePP.character.dnd5e.HPInfo
   DicePP.character.dnd5e.SpellInfo
   DicePP.character.dnd5e.AbilityInfo
   DicePP.character.dnd5e.MoneyInfo
   DicePP.character.dnd5e.DNDCharInfo



Functions
~~~~~~~~~

.. autoapisummary::

   DicePP.character.dnd5e.gen_template_char



Attributes
~~~~~~~~~~

.. autoapisummary::

   DicePP.character.dnd5e.CHAR_INFO_KEY_HP
   DicePP.character.dnd5e.CHAR_INFO_KEY_HP_DICE
   DicePP.character.dnd5e.CHAR_INFO_KEY_ABILITY
   DicePP.character.dnd5e.CHAR_INFO_KEY_LEVEL
   DicePP.character.dnd5e.CHAR_INFO_KEY_EXT
   DicePP.character.dnd5e.CHAR_INFO_KEY_PROF
   DicePP.character.dnd5e.ability_list
   DicePP.character.dnd5e.skill_list
   DicePP.character.dnd5e.saving_list
   DicePP.character.dnd5e.attack_list
   DicePP.character.dnd5e.check_item_list
   DicePP.character.dnd5e.check_item_index_dict
   DicePP.character.dnd5e.ext_item_list
   DicePP.character.dnd5e.ext_item_index_dict


.. py:class:: HPInfo

   Bases: :py:obj:`data_manager.JsonObject`

   HP信息

   .. py:method:: serialize(self) -> str


   .. py:method:: deserialize(self, json_str: str) -> None


   .. py:method:: initialize(self, hp_cur: int, hp_max: int = 0, hp_temp: int = 0, hp_dice_type: int = 0, hp_dice_num: int = 0, hp_dice_max: int = 0)


   .. py:method:: is_record_normal(self) -> bool

      当前是否正常记录生命值 (拥有hp, 而不是单纯记录受损hp)


   .. py:method:: is_record_damage(self) -> bool

      当前是否是记录受损生命值的情况


   .. py:method:: take_damage(self, value: int)


   .. py:method:: heal(self, value: int)


   .. py:method:: get_info(self) -> str


   .. py:method:: use_hp_dice(self, num: int, con_mod: int) -> str

      使用生命骰, 并返回修改结果描述, 如
      使用2颗D4生命骰, 体质调整值为1, 回复(4+1)+(2+1)=8点生命值
      HP: 2/4 -> 4/4


   .. py:method:: long_rest(self)


   .. py:method:: process_roll_result(self, cmd_type: Literal[=, +, -], hp_cur_mod_result: Optional[roll_dice.RollResult] = None, hp_max_mod_result: Optional[roll_dice.RollResult] = None, hp_temp_mod_result: Optional[roll_dice.RollResult] = None, short_feedback=False) -> str

      根据输入进行修改, 返回修改结果描述, 如:
      当前HP减少 2*4 = 8
      HP: 10 -> HP: 2


   .. py:method:: get_char_info(self) -> str

      返回可用来组合成初始化角色卡的字符串
      例子:
      $生命值$ 5/10 (4)
      $生命骰$ 4/10 D6
      例子2:
      $生命值$ 8



.. py:data:: CHAR_INFO_KEY_HP
   :annotation: = $生命值$

   

.. py:data:: CHAR_INFO_KEY_HP_DICE
   :annotation: = $生命骰$

   

.. py:class:: SpellInfo

   Bases: :py:obj:`data_manager.JsonObject`

   .. py:method:: serialize(self) -> str


   .. py:method:: deserialize(self, json_str: str) -> None



.. py:class:: AbilityInfo

   Bases: :py:obj:`data_manager.JsonObject`

   .. py:method:: serialize(self) -> str


   .. py:method:: deserialize(self, json_str: str) -> None


   .. py:method:: initialize(self, level_str: str, ability_info_list: List[int], prof_list: List[str], ext_dict: Dict[str, str])

      通过用户输入初始化属性, 初始化失败则抛出AssertionError
      Args:
          level_str: 正整数字符串, 代表等级
          ability_info_list: 长度为6的正整数字符串列表, 代表六项属性
          prof_list: 长度任意的字符串列表, 代表熟练的检定条目, 如["2*奥秘", "智力豁免"]代表奥秘有双倍熟练加值, 智力豁免拥有单倍熟练加值, 其余检定没有熟练加值
          ext_dict: key为检定条目, value为对应检定的额外加值


   .. py:method:: get_prof_bonus(self) -> int


   .. py:method:: get_modifier(self, ability_index: int) -> int


   .. py:method:: perform_check(self, check_name: str, advantage: int, mod_str: str) -> Tuple[str, str, int]

      进行技能检定, 失败抛出AssertionError
      Args:
          check_name: 必须为skill_dict中的元素, 如: 力量/运动
          advantage: 该次检定是否具有优势, 1为优势, -1为劣势, =0为无优无劣
          mod_str: 该次检定的临时加值
      Returns:
          hint_str: 提示信息
          result_str: 检定的计算过程
          result_val: 检定结果


   .. py:method:: get_char_info(self) -> str

      返回可用来组合成初始化角色卡的字符串
      例子:
      $等级$ 5
      $属性$ 10/11/12/15/12
      $熟练$ 力量/2*隐匿/奥秘
      $额外加值$ 运动:优势/隐匿:优势+2/游说:-2



.. py:data:: CHAR_INFO_KEY_ABILITY
   :annotation: = $属性$

   

.. py:data:: CHAR_INFO_KEY_LEVEL
   :annotation: = $等级$

   

.. py:data:: CHAR_INFO_KEY_EXT
   :annotation: = $额外加值$

   

.. py:data:: CHAR_INFO_KEY_PROF
   :annotation: = $熟练$

   

.. py:data:: ability_list
   :annotation: = ['力量', '敏捷', '体质', '智力', '感知', '魅力']

   

.. py:data:: skill_list
   :annotation: = ['运动', '体操', '巧手', '隐匿', '先攻', '奥秘', '历史', '调查', '自然', '宗教', '驯兽', '洞悉', '医药', '察觉', '求生', '欺瞒',...

   

.. py:data:: saving_list
   :annotation: = ['力量豁免', '敏捷豁免', '体质豁免', '智力豁免', '感知豁免', '魅力豁免']

   

.. py:data:: attack_list
   :annotation: = ['力量攻击', '敏捷攻击', '体质攻击', '智力攻击', '感知攻击', '魅力攻击']

   

.. py:data:: check_item_list
   

   

.. py:data:: check_item_index_dict
   

   

.. py:data:: ext_item_list
   

   

.. py:data:: ext_item_index_dict
   

   

.. py:class:: MoneyInfo

   Bases: :py:obj:`data_manager.JsonObject`

   .. py:method:: serialize(self) -> str


   .. py:method:: deserialize(self, json_str: str) -> None



.. py:class:: DNDCharInfo

   Bases: :py:obj:`data_manager.JsonObject`

   DND5E 角色信息

   .. py:method:: serialize(self) -> str


   .. py:method:: deserialize(self, json_str: str) -> None


   .. py:method:: initialize(self, input_str: str)

      通过用户输入初始化属性, 任意内容初始化失败则抛出AssertionError, 并且不会产生实际影响
      角色卡示例:
      $姓名$ 伊丽莎白
      $等级$ 5
      $生命值$ 5/10(4)
      $生命骰$ 4/10 D6
      $属性$ 10/11/12/15/12
      $熟练$ 力量/2*隐匿/奥秘
      $额外加值$ 运动:优势/隐匿:优势+2/游说:-2


   .. py:method:: get_char_info(self) -> str

      返回完整角色卡描述


   .. py:method:: use_hp_dice(self, num: int) -> str


   .. py:method:: long_rest(self) -> str



.. py:function:: gen_template_char() -> DNDCharInfo


